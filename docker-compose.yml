
services:
  ## MySQL Docker Compose Config
  order-mysql:
    container_name: order-mysql
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
    restart: always
    ports:
      - "3308:3308"
    expose:
      - "3308"
    networks:
      - mynet

  inventory-mysql:
    container_name: inventory-mysql
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root

    ports:
      - "3307:3307"
    expose:
      - "3307"
    restart: always
    networks:
      - mynet


  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:7.0.12
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - mynet


  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8.0
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - mynet

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    ports:
      - "8181:8181"
    networks:
      - mynet



  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    networks:
      - mynet


  ## Zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - mynet

  ## Eureka Server
  discovery-server:
    build:
      context: .\discovery-server\.
      dockerfile: Dockerfile

    container_name: discovery-server
    image: discovery-server:latest
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    networks:
      - mynet


  api-gateway:
    build:
      context: .\api-gateway\.
      dockerfile: Dockerfile

    container_name: api-gateway
    image: api-gateway:latest

    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
    ports:
      - "8081:8080"
    networks:
      - mynet


  ## Product-Service Docker Compose Config
  product-service:
    build:
      context: .\product-service\.
      dockerfile: Dockerfile

    container_name: product-service
    image: product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
    networks:
      - mynet
  ## Order-Service Docker Compose Config
  order-service:
    build:
      context: .\order-service\.
      dockerfile: Dockerfile

    container_name: order-service
    image: order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3308/user?useUnicode=true&characterEncoding=utf8
    depends_on:
      - order-mysql
      - broker
      - zipkin
      - discovery-server
      - api-gateway
    networks:
      - mynet

  ## Inventory-Service Docker Compose Config
  inventory-service:
    build:
      context: .\inventory-service\.
      dockerfile: Dockerfile

    container_name: inventory-service
    image: inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3307/user?useUnicode=true&characterEncoding=utf8
    depends_on:
      - inventory-mysql
      - discovery-server
      - api-gateway
    networks:
      - mynet

  ## Notification-Service Docker Compose Config
  notification-service:
    build:
      context: .\notification-service\.
      dockerfile: Dockerfile
    container_name: notification-service
    image: notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
    networks:
      - mynet

networks:
  mynet:
    driver: bridge
#  ## Prometheus
#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:v2.37.1
#
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service
#
#  grafana:
#    container_name: grafana
#    image: grafana/grafana-oss:8.5.2
#
#    restart: always
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password
